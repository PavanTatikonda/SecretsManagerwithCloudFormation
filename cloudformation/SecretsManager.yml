Description: >
  This template demonstrates the AWS Secrets Manager CloudFormation ingtegration

Parameters:
    DatabasePassword:
      Description: Admin password for the Postgres database
      Type: String
      NoEcho: true

Resources:

 # Creates Lambda Execution Role for the SecretsManager Lambda Function
  SecretsManagerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: lambdaPolicy_allowSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                  - secretsmanager:PutSecretValue
                  - secretsmanager:GetSecretValue
                  - secretsmanager:CreateSecret
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*


# Creates a Lambda function that interfaces with AWS Secrets Manager
  SecretsManagerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: secretsmanager-cloudformation
        S3Key: SecretsManagerLambda.zip
      Handler: SecretsManagerLambda.lambda_handler
      Runtime: python3.6
      Role: !GetAtt SecretsManagerLambdaExecutionRole.Arn
      MemorySize: 128
      Timeout: 20

# Custom Resource that retrieves and returns the password for an exisitng Secret
# The SecretName must exist in AWS Secrets Manager
  GetAWSSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretsManagerLambdaFunction.Arn
      SecretAction: get
      SecretName: myExistingSecret
      Region: us-east-1

# Custom Resource that stores a Secret of your choosing
# Uses the password provided by the `DatabasePassword` Parameter
  StoreAWSSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretsManagerLambdaFunction.Arn
      SecretAction: upsert
      SecretName: PostgresDBAdmin
      SecretUserName: postgresAdmin
      SecretPassword: !Ref DatabasePassword
      SecretDescription: Admin password for the Postgres database
      Region: us-east-1

# Custom Resource that generates and returns a random password and stores the Secret
  GenerateAWSSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretsManagerLambdaFunction.Arn
      SecretAction: upsert
      SecretName: AuroraDBAdmin
      SecretUserName: auroraAdmin
      SecretDescription: Admin password for Aurora database - randomly generated
      Region: us-east-1

Outputs:

# Outputs are for tesing purposes only!!!
# NEVER output your Secrets in a real world implementation!!!
  RetrievedSecret:
    Description: The secret we retrieved from Secrets Manager
    Value: !GetAtt GetAWSSecret.SecretPassword

  GeneratedSecret:
    Description: The secret generated by Secrets Manager
    Value: !GetAtt GenerateAWSSecret.SecretPassword
